# Server monitoring packages and containers

- name: Linux Server | Monitoring | Install packages
  apt:
    state: present
    name:
      - htop
      - slurm
      - iotop
      - dstat
      - sysstat

- name: Linux Server | Monitoring | Create directory structure
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  with_items:
    - /data/file-exporter

# checking for docker/loki presence and installing/updating accordingly
- name: Linux Server | Monitoring | verify if loki docker plug-in is installed
  shell: if [ $(docker plugin ls | grep -o loki | wc -c) -eq 5 ]; then echo "present"; else echo "absent"; fi
  register: loki_state
  when: loki is defined

- name: Linux Server | Monitoring | install loki docker plug-in
  shell: docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
  when: loki is defined and loki_state.stdout == 'absent'

- name: check if loki docker plug-in is enabled
  shell: if [ $(docker plugin ls | grep -o true) ]; then echo true; else echo false; fi
  register: loki_enabled
  when: loki is defined and loki_state.stdout == 'present'

- name: disabling loki docker plug-in
  shell: if [ $(docker plugin disable loki | grep -o loki | wc -c) -eq 5 ]; then echo "false"; else echo "true"; fi
  register: loki_enabled
  when: loki is defined and loki_state.stdout == 'present' and loki_enabled.stdout == 'true'

- name: upgrading loki docker plug-in
  shell: docker plugin upgrade loki grafana/loki-docker-driver:latest --grant-all-permissions
  when: loki is defined and loki_state.stdout == 'present' and (loki_enabled.stdout|d('false')) == 'false'

- name: enabling loki docker plug-in
  shell: docker plugin enable loki
  when: loki is defined and loki_state.stdout == 'present' and (loki_enabled.stdout|d('false')) == 'false'

- name: Linux Server | Monitoring | Setup node exporter
  docker_container:
    hostname: "{{ hostname + '.' + domain }}"
    name: prometheus-exporter-node
    image: prom/node-exporter:master
    network_mode: host
    pid_mode: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /data/file-exporter:/file-exporter
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.textfile.directory"
      - "/file-exporter"
    state: started
    restart_policy: unless-stopped
    memory: "32m"
    ports:
      - 9100:9100

- name: Linux Server | Monitoring | Setup cAdvisor
  docker_container:
    hostname: "{{ hostname + '.' + domain }}"
    name: prometheus-exporter-cadvisor
    image: gcr.io/google-containers/cadvisor
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    privileged: true
    state: started
    restart_policy: unless-stopped
    memory: "96m"
    published_ports:
      - 9101:8080

- name: Linux Server | Monitoring | Setup promtail configuration
  template:
    src: promtail.j2
    dest: "{{ test_prefix_dir | default('/config/') }}/promtail.yml"
  notify: docker configuration changed
  when: loki is defined

- name: Linux Server | Monitoring | Create promtail volume
  docker_volume:
    name: "promtail-storage"
  when: loki is defined

- name: Linux Server | Monitoring | Setup promtail
  docker_container:
    hostname: "{{ hostname + '.' + domain }}"
    name: promtail
    image: grafana/promtail:latest
    volumes:
      - "/var/log/journal/:/var/log/journal/"
      - "/run/log/journal/:/run/log/journal/"
      - "/etc/machine-id:/etc/machine-id"
      - "/config/promtail.yml:/etc/promtail.yml"
      - "promtail-storage:/promtail"
    command: "-config.file=/etc/promtail.yml"
    state: started
    restart: true
    restart_policy: unless-stopped
    memory: "32m"
    published_ports:
      - 9080:9080
  when: loki is defined
